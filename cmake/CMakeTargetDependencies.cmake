#[[
   Part of the CMakeTargets Project (https://github.com/cpp4ever/CMakeTargets), under the MIT License
   SPDX-License-Identifier: MIT

   Copyright (c) 2024 Mikhail Smirnov

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.
]]

function(unaliase_target IN_TARGET OUT_TARGET)
   get_target_property(ALIASED_TARGET ${IN_TARGET} ALIASED_TARGET)
   if(ALIASED_TARGET STREQUAL ALIASED_TARGET-NOTFOUND)
      set(${OUT_TARGET} ${IN_TARGET} PARENT_SCOPE)
   else()
      set(${OUT_TARGET} ${ALIASED_TARGET} PARENT_SCOPE)
   endif()
endfunction()

function(unfold_link_library_expression IN_LINK_LIBRARY_EXPRESSION OUT_LINK_LIBRARIES OUT_UNFOLD_SUCCEEDED)
   string(STRIP "${IN_LINK_LIBRARY_EXPRESSION}" IN_LINK_LIBRARY_EXPRESSION)
   string(FIND "${IN_LINK_LIBRARY_EXPRESSION}" "$<" LINK_LIBRARY_EXPRESSION_IS_GENERATOR_EXPRESSION)
   if(LINK_LIBRARY_EXPRESSION_IS_GENERATOR_EXPRESSION EQUAL -1)
      string(REGEX REPLACE "[ \t\r\n]+" ";" LINK_LIBRARIES "${IN_LINK_LIBRARY_EXPRESSION}")
      list(REMOVE_ITEM LINK_LIBRARIES "")
      set(UNFOLD_SUCCEEDED TRUE)
   else()
      set(LINK_LIBRARIES )
      set(LINK_LIBRARY_EXPRESSION )
      set(
         LINK_LIBRARY_GENEX_REGEXES
         "^\\$<\\$<.*>:(.*)>$"
         "^\\$<(DEVICE_LINK|HOST_LINK|LINK_ONLY):(.*)>$" # Link Context
         "^\\$<(LINK_GROUP|LINK_LIBRARY):.*,(.*)>$" # Link Features
         "^\\$<(TARGET_NAME|TARGET_NAME_IF_EXISTS):(.*)>$" # Target Meta-Data
         "^\\$<(TARGET_IMPORT_FILE|TARGET_LINKER_FILE|TARGET_LINKER_IMPORT_FILE|TARGET_LINKER_LIBRARY_FILE|TARGET_OBJECTS|TARGET_SONAME_IMPORT_FILE):(.*)>$" # Target Artifacts
         "^\\$<BUILD_INTERFACE:(.*)>$" # Export Expressions
      )
      foreach(LINK_LIBRARY_GENEX_REGEX IN LISTS LINK_LIBRARY_GENEX_REGEXES)
         if(IN_LINK_LIBRARY_EXPRESSION MATCHES "${LINK_LIBRARY_GENEX_REGEX}")
            set(LINK_LIBRARY_EXPRESSION ${CMAKE_MATCH_${CMAKE_MATCH_COUNT}})
            break()
         endif()
      endforeach()
      if("${LINK_LIBRARY_EXPRESSION}" STREQUAL "")
         string(REGEX MATCH "${IN_LINK_LIBRARY_EXPRESSION}" "[ \t\r\n]" LINK_LIBRARY_EXPRESSION_IS_LIST)
         if("${LINK_LIBRARY_EXPRESSION_IS_LIST}" STREQUAL "")
            set(LINK_LIBRARIES )
            set(UNFOLD_SUCCEEDED FALSE)
         else()
            string(REGEX REPLACE "[ \t\r\n]+" ";" LINK_LIBRARY_EXPRESSIONS "${IN_LINK_LIBRARY_EXPRESSION}")
            list(REMOVE_ITEM LINK_LIBRARY_EXPRESSIONS "")
            unfold_link_library_expressions(LINK_LIBRARY_EXPRESSIONS LINK_LIBRARIES UNFOLD_SUCCEEDED)
         endif()
      else()
         unfold_link_library_expression("${LINK_LIBRARY_EXPRESSION}" LINK_LIBRARIES UNFOLD_SUCCEEDED)
      endif()
   endif()
   set(${OUT_LINK_LIBRARIES} ${LINK_LIBRARIES} PARENT_SCOPE)      
   set(${OUT_UNFOLD_SUCCEEDED} ${UNFOLD_SUCCEEDED} PARENT_SCOPE)      
endfunction()

function(unfold_link_library_expressions IN_LINK_LIBRARIES_EXPRESSIONS OUT_LINK_LIBRARIES OUT_UNFOLD_SUCCEEDED)
   set(LINK_LIBRARIES )
   set(ALL_UNFOLD_SUCCEEDED TRUE)
   foreach(LINK_LIBRARY_EXPRESSION IN LISTS ${IN_LINK_LIBRARIES_EXPRESSIONS})
      unfold_link_library_expression("${LINK_LIBRARY_EXPRESSION}" UNFOLDED_LINK_LIBRARIES UNFOLD_SUCCEEDED)
      list(APPEND LINK_LIBRARIES ${UNFOLDED_LINK_LIBRARIES})
      if(NOT UNFOLD_SUCCEEDED)
         set(ALL_UNFOLD_SUCCEEDED FALSE)
      endif()
   endforeach()
   list(REMOVE_DUPLICATES LINK_LIBRARIES)
   set(${OUT_LINK_LIBRARIES} ${LINK_LIBRARIES} PARENT_SCOPE)
   set(${OUT_UNFOLD_SUCCEEDED} ${ALL_UNFOLD_SUCCEEDED} PARENT_SCOPE)      
endfunction()

function(unfold_link_sources_expression IN_LINK_SOURCES_EXPRESSION OUT_LINK_LIBRARIES OUT_UNFOLD_SUCCEEDED)
   string(STRIP "${IN_LINK_SOURCES_EXPRESSION}" IN_LINK_SOURCES_EXPRESSION)
   string(FIND "${IN_LINK_SOURCES_EXPRESSION}" "$<" LINK_SOURCES_EXPRESSION_IS_GENERATOR_EXPRESSION)
   if(LINK_SOURCES_EXPRESSION_IS_GENERATOR_EXPRESSION EQUAL -1)
      string(REGEX REPLACE "[ \t\r\n]+" ";" LINK_LIBRARIES "${IN_LINK_SOURCES_EXPRESSION}")
      list(REMOVE_ITEM LINK_LIBRARIES "")
      set(UNFOLD_SUCCEEDED TRUE)
   else()
      set(LINK_LIBRARIES )
      set(LINK_SOURCES_EXPRESSION )
      set(
         LINK_SOURCES_GENEX_REGEXES
         "^\\\$<\\\$<.*>:(.*)>$"
         "^\\\$<TARGET_OBJECTS:(.*)>$" # Target Artifacts
      )
      foreach(LINK_SOURCES_GENEX_REGEX IN LISTS LINK_SOURCES_GENEX_REGEXES)
         if(IN_LINK_SOURCES_EXPRESSION MATCHES "${LINK_SOURCES_GENEX_REGEX}")
            set(LINK_SOURCES_EXPRESSION ${CMAKE_MATCH_${CMAKE_MATCH_COUNT}})
            break()
         endif()
      endforeach()
      if("${LINK_SOURCES_EXPRESSION}" STREQUAL "")
         string(REGEX MATCH "${IN_LINK_SOURCES_EXPRESSION}" "[ \t\r\n]" LINK_SOURCES_EXPRESSION_IS_LIST)
         if("${LINK_SOURCES_EXPRESSION_IS_LIST}" STREQUAL "")
            set(UNFOLD_SUCCEEDED FALSE)
         else()
            string(REGEX REPLACE "[ \t\r\n]+" ";" LINK_SOURCES_EXPRESSIONS "${IN_LINK_SOURCES_EXPRESSION}")
            list(REMOVE_ITEM LINK_SOURCES_EXPRESSIONS "")
            unfold_link_sources_expressions(LINK_SOURCES_EXPRESSIONS LINK_LIBRARIES UNFOLD_SUCCEEDED)
         endif()
      else()
         unfold_link_sources_expression("${LINK_SOURCES_EXPRESSION}" LINK_LIBRARIES UNFOLD_SUCCEEDED)
      endif()
   endif()
   set(${OUT_LINK_LIBRARIES} ${LINK_LIBRARIES} PARENT_SCOPE)      
   set(${OUT_UNFOLD_SUCCEEDED} ${UNFOLD_SUCCEEDED} PARENT_SCOPE)      
endfunction()

function(unfold_link_sources_expressions IN_LINK_SOURCES_EXPRESSIONS OUT_LINK_LIBRARIES OUT_UNFOLD_SUCCEEDED)
   set(LINK_LIBRARIES )
   set(ALL_UNFOLD_SUCCEEDED TRUE)
   foreach(LINK_SOURCES_EXPRESSION IN LISTS ${IN_LINK_SOURCES_EXPRESSIONS})
      unfold_link_sources_expression("${LINK_SOURCES_EXPRESSION}" UNFOLDED_LINK_LIBRARIES UNFOLD_SUCCEEDED)
      list(APPEND LINK_LIBRARIES ${UNFOLDED_LINK_LIBRARIES})
      if(NOT UNFOLD_SUCCEEDED)
         set(ALL_UNFOLD_SUCCEEDED FALSE)
      endif()
   endforeach()
   list(REMOVE_DUPLICATES LINK_LIBRARIES)
   set(${OUT_LINK_LIBRARIES} ${LINK_LIBRARIES} PARENT_SCOPE)
   set(${OUT_UNFOLD_SUCCEEDED} ${ALL_UNFOLD_SUCCEEDED} PARENT_SCOPE)      
endfunction()

function(get_target_link_libraries IN_TARGET OUT_TARGET_LINK_LIBRARIES)
   set(TARGET_LINK_LIBRARIES )

   get_target_property(TARGET_SOURCES_EXPRESSIONS ${IN_TARGET} SOURCES)
   if(NOT TARGET_SOURCES_EXPRESSIONS STREQUAL TARGET_SOURCES_EXPRESSIONS-NOTFOUND)
      foreach(TARGET_SOURCES_EXPRESSION IN LISTS TARGET_SOURCES_EXPRESSIONS)
         string(FIND "${TARGET_SOURCES_EXPRESSION}" "$<" TARGET_SOURCES_EXPRESSION_IS_GENERATOR_EXPRESSION)
         if(NOT TARGET_SOURCES_EXPRESSION_IS_GENERATOR_EXPRESSION EQUAL -1)
            unfold_link_sources_expression(
               "${TARGET_SOURCES_EXPRESSION}"
               TARGET_SOURCES_LINK_LIBRARIES
               UNFOLD_SUCCEEDED
            )
            if(NOT UNFOLD_SUCCEEDED)
               message(
                  WARNING
                  "Failed to unfold sources expression for the target ${IN_TARGET}.
Sources expression: ${TARGET_SOURCES_EXPRESSION}.
Unfolded link libraries: ${TARGET_SOURCES_LINK_LIBRARIES}."
               )
            endif()
            foreach(TARGET_SOURCES_LINK_LIBRARY IN LISTS TARGET_SOURCES_LINK_LIBRARIES)
               if(TARGET ${TARGET_SOURCES_LINK_LIBRARY})
                  unaliase_target(${TARGET_SOURCES_LINK_LIBRARY} TARGET_SOURCES_LINK_LIBRARY)
               endif()
               list(APPEND TARGET_LINK_LIBRARIES ${TARGET_SOURCES_LINK_LIBRARY})
            endforeach()
         endif()
      endforeach()
   endif()

   set(TARGET_LINK_LIBRARIES_EXPRESSIONS_INCLUDE )
   get_target_property(TARGET_LINK_LIBRARIES_EXPRESSIONS ${IN_TARGET} IMPORTED_LINK_INTERFACE_LIBRARIES)
   if(NOT TARGET_LINK_LIBRARIES_EXPRESSIONS STREQUAL TARGET_LINK_LIBRARIES_EXPRESSIONS-NOTFOUND)
      list(APPEND TARGET_LINK_LIBRARIES_EXPRESSIONS_INCLUDE ${TARGET_LINK_LIBRARIES_EXPRESSIONS})
   endif()
   get_target_property(TARGET_LINK_LIBRARIES_EXPRESSIONS ${IN_TARGET} INTERFACE_LINK_LIBRARIES)
   if(NOT TARGET_LINK_LIBRARIES_EXPRESSIONS STREQUAL TARGET_LINK_LIBRARIES_EXPRESSIONS-NOTFOUND)
      list(APPEND TARGET_LINK_LIBRARIES_EXPRESSIONS_INCLUDE ${TARGET_LINK_LIBRARIES_EXPRESSIONS})
   endif()
   get_target_property(TARGET_LINK_LIBRARIES_EXPRESSIONS ${IN_TARGET} LINK_INTERFACE_LIBRARIES)
   if(NOT TARGET_LINK_LIBRARIES_EXPRESSIONS STREQUAL TARGET_LINK_LIBRARIES_EXPRESSIONS-NOTFOUND)
      list(APPEND TARGET_LINK_LIBRARIES_EXPRESSIONS_INCLUDE ${TARGET_LINK_LIBRARIES_EXPRESSIONS})
   endif()
   get_target_property(TARGET_LINK_LIBRARIES_EXPRESSIONS ${IN_TARGET} LINK_LIBRARIES)
   if(NOT TARGET_LINK_LIBRARIES_EXPRESSIONS STREQUAL TARGET_LINK_LIBRARIES_EXPRESSIONS-NOTFOUND)
      list(APPEND TARGET_LINK_LIBRARIES_EXPRESSIONS_INCLUDE ${TARGET_LINK_LIBRARIES_EXPRESSIONS})
   endif()
   get_property(MULTI_CONFIG_GENERATOR GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
   if(MULTI_CONFIG_GENERATOR)
      foreach(CONFIGURATION_TYPE IN LISTS CMAKE_CONFIGURATION_TYPES)
         get_target_property(TARGET_LINK_LIBRARIES_EXPRESSIONS ${IN_TARGET} IMPORTED_LINK_INTERFACE_LIBRARIES_${CONFIGURATION_TYPE})
         if(NOT TARGET_LINK_LIBRARIES_EXPRESSIONS STREQUAL TARGET_LINK_LIBRARIES_EXPRESSIONS-NOTFOUND)
            list(APPEND TARGET_LINK_LIBRARIES_EXPRESSIONS_INCLUDE ${TARGET_LINK_LIBRARIES_EXPRESSIONS})
         endif()
         get_target_property(TARGET_LINK_LIBRARIES_EXPRESSIONS ${IN_TARGET} INTERFACE_LINK_LIBRARIES_${CONFIGURATION_TYPE})
         if(NOT TARGET_LINK_LIBRARIES_EXPRESSIONS STREQUAL TARGET_LINK_LIBRARIES_EXPRESSIONS-NOTFOUND)
            list(APPEND TARGET_LINK_LIBRARIES_EXPRESSIONS_INCLUDE ${TARGET_LINK_LIBRARIES_EXPRESSIONS})
         endif()
         get_target_property(TARGET_LINK_LIBRARIES_EXPRESSIONS ${IN_TARGET} LINK_INTERFACE_LIBRARIES_${CONFIGURATION_TYPE})
         if(NOT TARGET_LINK_LIBRARIES_EXPRESSIONS STREQUAL TARGET_LINK_LIBRARIES_EXPRESSIONS-NOTFOUND)
            list(APPEND TARGET_LINK_LIBRARIES_EXPRESSIONS_INCLUDE ${TARGET_LINK_LIBRARIES_EXPRESSIONS})
         endif()
      endforeach()
   else()
      get_target_property(TARGET_LINK_LIBRARIES_EXPRESSIONS ${IN_TARGET} IMPORTED_LINK_INTERFACE_LIBRARIES_${CMAKE_BUILD_TYPE})
      if(NOT TARGET_LINK_LIBRARIES_EXPRESSIONS STREQUAL TARGET_LINK_LIBRARIES_EXPRESSIONS-NOTFOUND)
         list(APPEND TARGET_LINK_LIBRARIES_EXPRESSIONS_INCLUDE ${TARGET_LINK_LIBRARIES_EXPRESSIONS})
      endif()
      get_target_property(TARGET_LINK_LIBRARIES_EXPRESSIONS ${IN_TARGET} INTERFACE_LINK_LIBRARIES_${CMAKE_BUILD_TYPE})
      if(NOT TARGET_LINK_LIBRARIES_EXPRESSIONS STREQUAL TARGET_LINK_LIBRARIES_EXPRESSIONS-NOTFOUND)
         list(APPEND TARGET_LINK_LIBRARIES_EXPRESSIONS_INCLUDE ${TARGET_LINK_LIBRARIES_EXPRESSIONS})
      endif()
      get_target_property(TARGET_LINK_LIBRARIES_EXPRESSIONS ${IN_TARGET} LINK_INTERFACE_LIBRARIES_${CMAKE_BUILD_TYPE})
      if(NOT TARGET_LINK_LIBRARIES_EXPRESSIONS STREQUAL TARGET_LINK_LIBRARIES_EXPRESSIONS-NOTFOUND)
         list(APPEND TARGET_LINK_LIBRARIES_EXPRESSIONS_INCLUDE ${TARGET_LINK_LIBRARIES_EXPRESSIONS})
      endif()
   endif()
   get_target_property(TARGET_LINK_LIBRARIES_EXPRESSIONS ${IN_TARGET} INTERFACE_LINK_LIBRARIES_DIRECT)
   if(NOT TARGET_LINK_LIBRARIES_EXPRESSIONS STREQUAL TARGET_LINK_LIBRARIES_EXPRESSIONS-NOTFOUND)
      list(APPEND TARGET_LINK_LIBRARIES_EXPRESSIONS_INCLUDE ${TARGET_LINK_LIBRARIES_EXPRESSIONS})
   endif()
   list(REMOVE_DUPLICATES TARGET_LINK_LIBRARIES_EXPRESSIONS_INCLUDE)
   list(REMOVE_ITEM TARGET_LINK_LIBRARIES_EXPRESSIONS_INCLUDE "")
   unfold_link_library_expressions(
      TARGET_LINK_LIBRARIES_EXPRESSIONS_INCLUDE
      TARGET_LINK_LIBRARIES_INCLUDE
      UNFOLD_SUCCEEDED
   )
   if(NOT UNFOLD_SUCCEEDED)
      message(
         WARNING 
         "Failed to unfold link libraries expressions for the target ${IN_TARGET}.
Link libraries expressions: ${TARGET_LINK_LIBRARIES_EXPRESSIONS_INCLUDE}.
Unfolded link libraries: ${TARGET_LINK_LIBRARIES_INCLUDE}."
      )
   endif()
   foreach(TARGET_LINK_LIBRARY IN LISTS TARGET_LINK_LIBRARIES_INCLUDE)
      if(TARGET ${TARGET_LINK_LIBRARY})
         unaliase_target(${TARGET_LINK_LIBRARY} TARGET_LINK_LIBRARY)
      endif()
      list(APPEND TARGET_LINK_LIBRARIES ${TARGET_LINK_LIBRARY})
   endforeach()
   list(REMOVE_DUPLICATES TARGET_LINK_LIBRARIES)

   get_target_property(TARGET_LINK_LIBRARIES_EXPRESSIONS_EXCLUDE ${IN_TARGET} INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE)
   if(NOT TARGET_LINK_LIBRARIES_EXPRESSIONS_EXCLUDE STREQUAL TARGET_LINK_LIBRARIES_EXPRESSIONS_EXCLUDE-NOTFOUND)
      list(REMOVE_ITEM TARGET_LINK_LIBRARIES_EXPRESSIONS_EXCLUDE "")
      unfold_link_library_expressions(
         TARGET_LINK_LIBRARIES_EXPRESSIONS_EXCLUDE
         TARGET_LINK_LIBRARIES_EXCLUDE
         UNFOLD_SUCCEEDED
      )
      if(NOT UNFOLD_SUCCEEDED)
         message(
            WARNING
            "Failed to unfold exclude link libraries expressions for the target ${IN_TARGET}.
Exclude link libraries expressions: ${TARGET_LINK_LIBRARIES_EXPRESSIONS_EXCLUDE}.
Unfolded exclude link libraries: ${TARGET_LINK_LIBRARIES_EXCLUDE}."
         )
      endif()
      foreach(TARGET_LINK_LIBRARY_EXCLUDE IN LISTS TARGET_LINK_LIBRARIES_EXCLUDE)
         if(TARGET ${TARGET_LINK_LIBRARY_EXCLUDE})
            unaliase_target(${TARGET_LINK_LIBRARY_EXCLUDE} TARGET_LINK_LIBRARY_EXCLUDE)
         endif()
         list(REMOVE_ITEM TARGET_LINK_LIBRARIES ${TARGET_LINK_LIBRARY_EXCLUDE})
      endforeach()
   endif()

   message(VERBOSE "${IN_TARGET} link libraries: ${TARGET_LINK_LIBRARIES}")
   set(${OUT_TARGET_LINK_LIBRARIES} ${TARGET_LINK_LIBRARIES} PARENT_SCOPE)
endfunction()

function(get_target_link_libraries_recursive IN_TARGET OUT_LINK_LIBRARIES)
   get_target_link_libraries(${IN_TARGET} TARGET_LINK_LIBRARIES)
   set(LINK_LIBRARIES )
   foreach(TARGET_LINK_LIBRARY IN LISTS TARGET_LINK_LIBRARIES)
      list(APPEND LINK_LIBRARIES ${TARGET_LINK_LIBRARY})
      if(TARGET ${TARGET_LINK_LIBRARY})
         get_target_link_libraries_recursive(${TARGET_LINK_LIBRARY} TRANSITIVE_LINK_LIBRARIES)
         list(APPEND LINK_LIBRARIES ${TRANSITIVE_LINK_LIBRARIES})
      endif()
   endforeach()
   list(REMOVE_DUPLICATES LINK_LIBRARIES)
   set(${OUT_LINK_LIBRARIES} ${LINK_LIBRARIES} PARENT_SCOPE)
endfunction()
